# # This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# # See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
# name: CMake on a single platform 

# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# env:
#   # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
#   BUILD_TYPE: Release

# jobs:
#   build:
#     # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
#     # You can convert this to a matrix build if you need cross-platform coverage.
#     # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

#     - name: Build
#       # Build your program with the given configuration
#       run: cmake --build ${{github.workspace}}/build --target jsquick -j 14
#     - name: Cpack
#       run: cd ${{github.workspace}}/build && cpack
#     # - name: Test
#     #   working-directory: ${{github.workspace}}/build
#     #   # Execute tests defined by the CMake configuration.
#     #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#     #   run: ctest -C ${{env.BUILD_TYPE}}

name: Build and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >
            base-devel
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            nsis

      - name: Configure CMake
        run: |
          cmake -G "MSYS Makefiles" -B build -S .
        
      - name: Build
        run: |
          cmake --build build --config Release

      - name: Package with CPack
        run: |
          cd build
          cpack

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v1.0.0
          release_name: Release v1.0.0
          draft: false
          prerelease: false

      - name: Upload Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/restme-1.0.0-win64.exe
          asset_name: restme-1.0.0-win64.exe
          asset_content_type: application/octet-stream
